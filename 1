public class FlightReservationSystem {
    public static void main(String[] args) {
        try {
            // === Example 1: Domestic flight booking ===
            long departure = System.currentTimeMillis() + (7L * 24 * 60 * 60 * 1000); // 1 week later
            long arrival   = departure + (2L * 60 * 60 * 1000);                    // +2 hours

            DomesticFlight domesticFlight = new DomesticFlight(
                "TK101", "Istanbul", "Ankara", departure, arrival, 1000.0, 0.18
            );
            long birth1 = System.currentTimeMillis() - (35L * 365 * 24 * 60 * 60 * 1000);
            Passenger p1 = new Passenger("Ahmet", "Yılmaz", birth1,
                                         "A12345678", "Turkish",
                                         "ahmet@example.com", "+905551234567");
            long birth2 = System.currentTimeMillis() - (28L * 365 * 24 * 60 * 60 * 1000);
            Passenger p2 = new Passenger("Ayşe", "Kaya", birth2,
                                         "B98765432", "Turkish",
                                         "ayse@example.com", "+905559876543");

            Passenger[] domesticPassengers = { p1, p2 };
            SeasonalPricingStrategy domPricing = new SeasonalPricingStrategy(0.18, 0.05);
            StandardBooking domBooking = new StandardBooking(domesticFlight, domesticPassengers, domPricing, true);

            boolean created1 = domBooking.createBooking();
            boolean seats1   = domBooking.assignSeats();

            System.out.println("=== Example 1 ===");
            System.out.println("Booking OK: " + created1 + ", Seats assigned: " + seats1);
            if (created1 && seats1) {
                CreditCardPayment payment1 = new CreditCardPayment(domBooking,
                    "1234567890123456", "Ahmet Yılmaz", "12/25", "123"
                );
                System.out.println("Payment OK: " + payment1.processPayment()
                                   + ", PaymentStatus: " + payment1.getStatus());
                // İptal & iade örneği
                if (domBooking.cancel()) {
                    double refund = domBooking.calculateRefundAmount();
                    payment1.refundPayment();
                    System.out.println("Cancelled & refunded: " + refund + " TL");
                }
            }

            // === Example 2: International flight booking ===
            long intlDep = System.currentTimeMillis() + (30L * 24 * 60 * 60 * 1000); // 30 days later
            long intlArr = intlDep + (5L * 60 * 60 * 1000);                          // +5 hours

            InternationalFlight intlFlight = new InternationalFlight(
                "TK202", "Istanbul", "Paris", intlDep, intlArr, 5000.0
            );
            long birth3 = System.currentTimeMillis() - (40L * 365 * 24 * 60 * 60 * 1000);
            Passenger p3 = new Passenger("Mehmet", "Çelik", birth3,
                                         "C11223344", "Turkish",
                                         "mehmet@example.com", "+905551112233");
            long birth4 = System.currentTimeMillis() - (30L * 365 * 24 * 60 * 60 * 1000);
            Passenger p4 = new Passenger("Elif", "Demir", birth4,
                                         "D55667788", "Turkish",
                                         "elif@example.com", "+905559998877");

            Passenger[] intlPassengers = { p3, p4 };
            SeasonalPricingStrategy intlPricing = new SeasonalPricingStrategy(0.20, 0.05);
            StandardBooking intlBooking = new StandardBooking(intlFlight, intlPassengers, intlPricing, false);

            boolean created2 = intlBooking.createBooking();
            boolean seats2   = intlBooking.assignSeats();
            System.out.println("\n=== Example 2 ===");
            System.out.println("Intl booking OK: " + created2 + ", Seats assigned: " + seats2);
            if (created2 && seats2) {
                CreditCardPayment payment2 = new CreditCardPayment(intlBooking,
                    "9876543210987654", "Elif Demir", "06/26", "456"
                );
                System.out.println("Payment OK: " + payment2.processPayment()
                                   + ", Status: " + payment2.getStatus());
            }

            // === Example 3: Too many passengers (seat shortage) ===
            Passenger[] many = new Passenger[60];
            for (int i = 0; i < 60; i++) {
                many[i] = new Passenger("Test" + i, "User" + i, birth1,
                                        "X" + i, "Country",
                                        "test" + i + "@example.com", "+900000000000");
            }
            StandardBooking bigBooking = new StandardBooking(domesticFlight, many, domPricing, false);
            boolean created3 = bigBooking.createBooking();
            boolean seats3   = bigBooking.assignSeats();
            System.out.println("\n=== Example 3 ===");
            System.out.println("Big booking created: " + created3
                               + ", Seats assigned (should be false): " + seats3);

            // === Example 4: Change request too late ===
            long closeDep = System.currentTimeMillis() + (10L * 60 * 60 * 1000); // 10h later
            long closeArr = closeDep + (1L * 60 * 60 * 1000);                    // +1h
            DomesticFlight lateFlight = new DomesticFlight(
                "TK103", "Istanbul", "Izmir", closeDep, closeArr, 500.0, 0.18
            );
            Passenger lateP = new Passenger("Test", "Late", birth1,
                                            "L12345", "Turkish",
                                            "late@example.com", "+900000000000");
            StandardBooking lateBooking = new StandardBooking(
                lateFlight, new Passenger[]{lateP},
                new SeasonalPricingStrategy(0.18,0.0), false
            );
            lateBooking.createBooking();
            lateBooking.assignSeats();
            ChangeRequest req = new ChangeRequest(
                lateBooking.getBookingId(),
                closeDep + (2L * 60 * 60 * 1000),
                closeArr + (2L * 60 * 60 * 1000),
                new String[]{"D1"}
            );
            System.out.println("\n=== Example 4 ===");
            System.out.println("Change allowed (should be false): "
                               + ((IChangeable) lateFlight).change(req));

            // === Example 5: Cancellation not allowed ===
            boolean cancelLate = lateBooking.cancel();
            System.out.println("\n=== Example 5 ===");
            System.out.println("Cancellation allowed (should be false): " + cancelLate);

            // === Example 6: Invalid payment details ===
            CreditCardPayment badPay = new CreditCardPayment(
                lateBooking, "1111222233334444", "Late User", "01/20", "12"
            );
            System.out.println("\n=== Example 6 ===");
            System.out.println("Process bad payment (should be false): "
                               + badPay.processPayment());

            // === Example 7: Promo code application ===
            SeasonalPricingStrategy promoStrat = new SeasonalPricingStrategy(0.15, 0.0);
            boolean promoOK = promoStrat.applyPromoCode("SUMMER2023");
            double promoPrice = promoStrat.calculateFinalPrice(domesticFlight, 2);
            System.out.println("\n=== Example 7 ===");
            System.out.println("Promo applied: " + promoOK
                               + ", New price for 2 pax: " + promoPrice + " TL");

        } catch (Exception e) {
            System.err.println("Error: " + e.getMessage());
            e.printStackTrace();
        }
    }
}
    enum FlightStatus {
        SCHEDULED, BOARDING, DEPARTED, ARRIVED, DELAYED, CANCELLED
    }
    enum BookingStatus {
        PENDING, CONFIRMED, CANCELLED, FAILED
    }
    enum PaymentStatus {
        PENDING, COMPLETED, FAILED, REFUNDED
    }
    enum ClassType {
        ECONOMY, BUSINESS, FIRST
    }
    abstract class AbstractFlight {
        protected String flightNumber;
        protected String origin;
        protected String destination;
        protected long departureTime;
        protected long arrivalTime;
        protected FlightStatus status;
        protected Seat[] seats;
        protected double basePrice;
        public AbstractFlight(String flightNumber, String origin, String destination, long departureTime, long arrivalTime, double basePrice) {
            this.flightNumber=flightNumber;
            this.origin=origin;
            this.destination=destination;
            this.departureTime=departureTime;
            this.arrivalTime=arrivalTime;
            this.status = FlightStatus.SCHEDULED;
            this.seats = initializeSeats();
            this.basePrice=basePrice;
        }
        protected abstract Seat[] initializeSeats();
        public long calculateDuration() {
            return arrivalTime-departureTime/(60*1000);
        }
        //test edilecek
        public Seat[] getAvailableSeats() {
            int count = 0;
            for(int i=0;i<seats.length;i++) {
                if(seats[i].isAvailable()) {
                    count++;
                }
            }
            int j = 0;
            Seat[] availableSeats =new  Seat[count];
            for(int i=0;i<seats.length;i++) {
                if(seats[i].isAvailable()) {
                    availableSeats[j] = seats[i];
                    j++;
                }
            }
            return availableSeats;
        }
        public String getFlightNumber() {
            return flightNumber;
        }
        
        public void setFlightNumber(String flightNumber) {
            this.flightNumber = flightNumber;
        }
        
        public String getOrigin() {
            return origin;
        }
        
        public void setOrigin(String origin) {
            this.origin = origin;
        }
        
        public String getDestination() {
            return destination;
        }
        
        public void setDestination(String destination) {
            this.destination = destination;
        }
        
        public long getDepartureTime() {
            return departureTime;
        }
        
        public void setDepartureTime(long departureTime) {
            this.departureTime = departureTime;
        }
        
        public long getArrivalTime() {
            return arrivalTime;
        }
        
        public void setArrivalTime(long arrivalTime) {
            this.arrivalTime = arrivalTime;
        }
        
        public FlightStatus getStatus() {
            return status;
        }
        
        public void setStatus(FlightStatus status) {
            this.status = status;
        }
        
        public Seat[] getSeats() {
            return seats;
        }
        
        public void setSeats(Seat[] seats) {
            this.seats = seats;
        }
        
        public double getBasePrice() {
            return basePrice;
        }
        
        public void setBasePrice(double basePrice) {
            this.basePrice = basePrice;
        
    }
}
    abstract class AbstractBooking {
        protected String bookingId;
        protected AbstractFlight flight;
        protected Passenger[] passengers;
        protected Seat[] assignedSeats;
        protected long bookingTime;
        protected BookingStatus status;
        protected AbstractPricingStrategy pricingStrategy;
        protected double totalPrice;
        public AbstractBooking(AbstractFlight flight, Passenger[] passengers, AbstractPricingStrategy pricingStrategy) {
            bookingId = generateBookingId();
            this.flight=flight;
            this.passengers=passengers;
            this.assignedSeats = new Seat[passengers.length];
            this.bookingTime = System.currentTimeMillis();
            this.status = BookingStatus.PENDING;
            this.pricingStrategy=pricingStrategy;
            this.totalPrice = 0;
        }
        protected String generateBookingId() {
            return "BK"+ bookingTime;
        }
        //nasıl yapılacak bilinmiyor
        public boolean createBooking(){
            try {
            status = BookingStatus.CONFIRMED;
            totalPrice = calculateTotalPrice();
            return true;
            }
            catch(Exception ex) {
                status = BookingStatus.FAILED;
                return false;
            }
        }
        public double calculateTotalPrice() {
            return pricingStrategy.calculateFinalPrice(flight,passengers.length);
        }
        public boolean assignSeats() {
            Seat[] availableSeats = flight.getAvailableSeats();
            if(passengers.length<= availableSeats.length) {
                int j = 0;
                for(int i = 0;i<flight.seats.length;i++) {
                    if(flight.seats[i].isAvailable()) {
                        flight.seats[i].reserve();
                        assignedSeats[j]=flight.seats[i];
                        j++;
                    }
                    if(j==passengers.length) {
                        break;
                    }
                }
                return true;
            }
            else {
                return false;
            }
        }
        public String getBookingId() {
            return bookingId;
        }
        
        public void setBookingId(String bookingId) {
            this.bookingId = bookingId;
        }
        
        public AbstractFlight getFlight() {
            return flight;
        }
        
        public void setFlight(AbstractFlight flight) {
            this.flight = flight;
        }
        
        public Passenger[] getPassengers() {
            return passengers;
        }
        
        public void setPassengers(Passenger[] passengers) {
            this.passengers = passengers;
        }
        
        public Seat[] getAssignedSeats() {
            return assignedSeats;
        }
        
        public void setAssignedSeats(Seat[] assignedSeats) {
            this.assignedSeats = assignedSeats;
        }
        
        public long getBookingTime() {
            return bookingTime;
        }
        
        public void setBookingTime(long bookingTime) {
            this.bookingTime = bookingTime;
        }
        
        public BookingStatus getStatus() {
            return status;
        }
        
        public void setStatus(BookingStatus status) {
            this.status = status;
        }
        
        public AbstractPricingStrategy getPricingStrategy() {
            return pricingStrategy;
        }
        
        public void setPricingStrategy(AbstractPricingStrategy pricingStrategy) {
            this.pricingStrategy = pricingStrategy;
        }
        
        public double getTotalPrice() {
            return totalPrice;
        }
        
        public void setTotalPrice(double totalPrice) {
            this.totalPrice = totalPrice;
        }
    }
    abstract class AbstractPricingStrategy {
        protected double basePrice;
        protected double taxRate;
        protected double discountRate;
        public AbstractPricingStrategy(double taxRate, double discountRate) {
            this.taxRate=taxRate;
            this.discountRate=discountRate;
    }
    public double calculateBasePrice(AbstractFlight flight) {
        this.basePrice = flight.basePrice;
        return flight.basePrice;
    }
    public double applyDiscounts(int passengerCount) {
        double discountPrice = basePrice-(basePrice*discountRate);
        return discountPrice;
    }
    public double applyTaxes(double priceAfterDiscount) {
        double taxesPrice = priceAfterDiscount +priceAfterDiscount*taxRate;
        return taxesPrice;
    }
    public double calculateFinalPrice(AbstractFlight flight, int passengerCount) {
        calculateBasePrice(flight);
        return applyTaxes(applyDiscounts(passengerCount))*passengerCount;
    }
    public double getBasePrice() {
        return basePrice;
    }
    
    public void setBasePrice(double basePrice) {
        this.basePrice = basePrice;
    }
    
    public double getTaxRate() {
        return taxRate;
    }
    
    public void setTaxRate(double taxRate) {
        this.taxRate = taxRate;
    }
    
    public double getDiscountRate() {
        return discountRate;
    }
    
    public void setDiscountRate(double discountRate) {
        this.discountRate = discountRate;
    }
}
abstract class AbstractPaymentProcessor {
    protected String paymentId;
    protected AbstractBooking booking;
    protected double amount;
    protected long paymentTime;
    protected PaymentStatus status;
    public AbstractPaymentProcessor(AbstractBooking booking) {
        paymentId = generatePaymentId();
        this.booking=booking;
        amount =booking.totalPrice;
        status = PaymentStatus.PENDING;
        paymentTime = System.currentTimeMillis();
    }
    protected String generatePaymentId() {
        return "PAY" + paymentTime;
    }
    public abstract boolean processPayment();
    public abstract boolean validatePaymentDetails();
    public boolean refundPayment() {
        if(status == PaymentStatus.COMPLETED) {
            status = PaymentStatus.REFUNDED;
            return true;
        }
        else {
            return false;
        }
    }
    public String getPaymentId() {
        return paymentId;
    }
    
    public void setPaymentId(String paymentId) {
        this.paymentId = paymentId;
    }
    
    public AbstractBooking getBooking() {
        return booking;
    }
    
    public void setBooking(AbstractBooking booking) {
        this.booking = booking;
    }
    
    public double getAmount() {
        return amount;
    }
    
    public void setAmount(double amount) {
        this.amount = amount;
    }
    
    public long getPaymentTime() {
        return paymentTime;
    }
    
    public void setPaymentTime(long paymentTime) {
        this.paymentTime = paymentTime;
    }
    
    public PaymentStatus getStatus() {
        return status;
    }
    
    public void setStatus(PaymentStatus status) {
        this.status = status;
    }
}
interface IChangeable {
    boolean change(ChangeRequest request);
    double calculateChangeFee();
    boolean isChangeAllowed();
}
interface IPricingStrategy {
    double getPriceForClass(ClassType type);
    double getPriceForDate(long date);
    boolean applyPromoCode(String code);
}
interface ICancellable {
    boolean cancel();
    double calculateCancellationFee();
    boolean isCancellationAllowed();
}
interface IRefundable {
    boolean processRefund();
    double calculateRefundAmount();
    boolean isRefundable();
}
class DomesticFlight extends AbstractFlight implements IChangeable{
    private double domesticTaxRate;
    public DomesticFlight(String flightNumber, String origin, String destination, long departureTime, long arrivalTime, double basePrice, double domesticTaxRate) {
        super(flightNumber,origin,destination,departureTime,arrivalTime,basePrice);
        this.domesticTaxRate=domesticTaxRate;
    }
    @Override 
    protected Seat[] initializeSeats() {
        Seat[] seat = new Seat[50];
        for(int i = 0;i<10;i++) {
            seat[i] = new Seat("D"+i+1,ClassType.BUSINESS);
        }
        for(int i = 10;i<50;i++) {
            seat[i] = new Seat("D"+i+1,ClassType.ECONOMY);
        }
        return seat;
    }
    public double calculateDomesticTax() {
        return basePrice*domesticTaxRate;
    }
    @Override
    public boolean change(ChangeRequest request) {
        if(isChangeAllowed()) {
            departureTime = request.getNewDepartureTime();
            arrivalTime = request.getNewArrivalTime();
            Seat[] seats1 = new Seat[request.getNewSeatNumbers().length];
            for(int i = 0;i<request.getNewSeatNumbers().length;i++){
                seats1[i] = new Seat(request.getNewSeatNumbers()[i], seats[i].getClassType());
            }
            seats = seats1;
            return true;
        }
        else {
            return false;
        }
    }
    @Override
    public double calculateChangeFee() {
        return basePrice*0.1;
    }
    @Override
    public boolean isChangeAllowed() {
        long left = (departureTime-System.currentTimeMillis());
        if(left>=86400000) {
            return true;
        }
        else {
            return false;
        }
    }
    public double getDomesticTaxRate() {
        return domesticTaxRate;
    }
    public void setDomesticTaxRate(double domesticTaxRate) {
        this.domesticTaxRate=domesticTaxRate;
    }
}
class InternationalFlight extends AbstractFlight implements IChangeable{
    private String[] requiredDocuments;
    public InternationalFlight(String flightNumber, String origin, String destination, long departureTime, long arrivalTime, double basePrice) {
        super(flightNumber,origin,destination,departureTime,arrivalTime,basePrice);
        this.requiredDocuments = new String[]{"Passport(en az 6 ay geçerli)","Gerekli Vize(ler)","Boarding Pass"};
    }
    @Override 
    protected Seat[] initializeSeats() {
        Seat[] seat = new Seat[100];
        for(int i = 0;i<10;i++) {
            seat[i] = new Seat("I"+i+1,ClassType.FIRST);
        }
        for(int i = 10;i<30;i++) {
            seat[i] = new Seat("I"+i+1,ClassType.BUSINESS);
        }
        for(int i = 30;i<100;i++) {
            seat[i] = new Seat("I"+i+1,ClassType.ECONOMY);
        }
        return seat;
    }
    @Override
    public boolean change(ChangeRequest request) {
        if(isChangeAllowed()) {
            departureTime = request.getNewDepartureTime();
            arrivalTime = request.getNewArrivalTime();
            Seat[] seats1 = new Seat[request.getNewSeatNumbers().length];
            for(int i = 0;i<request.getNewSeatNumbers().length;i++){
                seats1[i] = new Seat(request.getNewSeatNumbers()[i], seats[i].getClassType());
            }
            seats = seats1;
            return true;
        }
        else {
            return false;
        }
    }
    @Override
    public double calculateChangeFee() {
        return basePrice*0.2;
    }
    @Override
    public boolean isChangeAllowed() {
        long left = (departureTime-System.currentTimeMillis());
        if(left>=259200000) {
            return true;
        }
        else {
            return false;
        }
    }
    public String[] getRequiredDocuments() {
        return requiredDocuments;
    }
    public void setRequiredDocuments(String[] requiredDocuments) {
        this.requiredDocuments=requiredDocuments;
    }
}
class StandardBooking extends AbstractBooking implements ICancellable,IRefundable {
    private boolean insuranceIncluded;
    public StandardBooking(AbstractFlight flight, Passenger[] passengers, AbstractPricingStrategy pricingStrategy, boolean insuranceIncluded) {
        super(flight,passengers,pricingStrategy);
        this.insuranceIncluded=insuranceIncluded;
    }
    @Override 
    public boolean cancel() {
        if(isCancellationAllowed()) {
            status = BookingStatus.CANCELLED;
            for(int i = 0;i<assignedSeats.length;i++) {
                for(int j = 0;j<flight.seats.length;j++) {
                    if(assignedSeats[i].getSeatNumber().equals(flight.seats[j].getSeatNumber())) {
                        flight.seats[j].release();
                    }
                }
            }
            return true;
        }
        else {
            return false;
        }
    }
    @Override
    public double calculateCancellationFee() {
        if(insuranceIncluded == true) {
            return 0;
        }
        else {
            long departure = flight.departureTime-System.currentTimeMillis();
            if(departure>= 1000*60*60*24*30) {
                return calculateTotalPrice()*0.1;
            }
            else if(departure<=1000*60*60*24*7) {
                return calculateTotalPrice()*0.5;
            }
            else {
                return calculateTotalPrice()*0.3;
            }
        }
    }
    @Override
    public boolean isCancellationAllowed() {
        long time = flight.departureTime-System.currentTimeMillis();
        if(time>=86400000) {
            return true;
        }
        else {
            return false;
        }
    }
    //log diyor
    @Override 
    public boolean processRefund() {
        if(isRefundable()) {
            double refund =  calculateRefundAmount();
            return true;
        }
        else {
            return false;
        }
    }
    @Override
    public double calculateRefundAmount() {
        return calculateTotalPrice()-calculateCancellationFee();
    }
    @Override 
    public boolean isRefundable() {
        if(status== BookingStatus.CANCELLED || (status== BookingStatus.CONFIRMED & isCancellationAllowed())) {
            return true;
        }
        else {
            return false;
        }
    }
    public boolean getInsuranceIncluded() {
        return insuranceIncluded;
    }
    public void setInsuranceIncluded(boolean insuranceIncluded) {
        this.insuranceIncluded=insuranceIncluded;
    }
}
class SeasonalPricingStrategy extends AbstractPricingStrategy implements IPricingStrategy {
    private double lowSeasonRate;
    private double highSeasonRate;
    private long[] highSeasonStartDates;
    private long[] highSeasonEndDates;
    public SeasonalPricingStrategy(double taxRate, double discountRate) {
        super(taxRate, discountRate);
        lowSeasonRate = 0.8;
        highSeasonRate = 1.3;
        this.highSeasonStartDates = new long[]{1759333200000L,1765717200000L};
        this.highSeasonEndDates = new long[]{1757812800000L,1768420800000L};
    }
    private boolean isHighSeason(long date) {
        if((date>highSeasonStartDates[0]&date<highSeasonEndDates[0])||(date>highSeasonStartDates[1]&date<highSeasonEndDates[1])) {
            return true;
        }
        else {
            return false;
        }
    }
    @Override
    public double calculateBasePrice(AbstractFlight flight) {
        if(isHighSeason(flight.departureTime)) {
            return super.calculateBasePrice(flight)*1.3;
        }
        else {
            return super.calculateBasePrice(flight)*0.8;
        }
    }
    @Override 
    public double getPriceForDate(long date) {
        if(isHighSeason(date)) {
            return basePrice*1.3;
        }
        else {
            return basePrice*0.8;
        }
    }
    @Override 
    public double getPriceForClass(ClassType type) {
        if(type == ClassType.FIRST) {
            return basePrice*3;
        }
        else if(type == ClassType.BUSINESS) {
            return basePrice*2;
        }
        else {
            return basePrice;
        }
    }
    @Override 
    public boolean applyPromoCode(String code) {
        if(code.equals("SUMMER2023")) {
            discountRate += 0.1;
            return true;
        }
        else if(code.equals("WINTER2023")) {
            discountRate += 0.15;
            return true;
        }
        else {
            return false;
        }
    }
    public double getLowSeasonRate() {
        return lowSeasonRate;
    }
    
    public void setLowSeasonRate(double lowSeasonRate) {
        this.lowSeasonRate = lowSeasonRate;
    }
    
    public double getHighSeasonRate() {
        return highSeasonRate;
    }
    
    public void setHighSeasonRate(double highSeasonRate) {
        this.highSeasonRate = highSeasonRate;
    }
    
    public long[] getHighSeasonStartDates() {
        return highSeasonStartDates;
    }
    
    public void setHighSeasonStartDates(long[] highSeasonStartDates) {
        this.highSeasonStartDates = highSeasonStartDates;
    }
    
    public long[] getHighSeasonEndDates() {
        return highSeasonEndDates;
    }
    
    public void setHighSeasonEndDates(long[] highSeasonEndDates) {
        this.highSeasonEndDates = highSeasonEndDates;
    }
}
class CreditCardPayment extends AbstractPaymentProcessor {
    private String cardNumber;
    private String cardHolderName;
    private String expiryDate;
    private String cvv;
    public CreditCardPayment(AbstractBooking booking, String cardNumber, String cardHolderName, String expiryDate, String cvv) {
        super(booking);
        this.cardNumber=cardNumber;
        this.cardHolderName=cardHolderName;
        this.expiryDate=expiryDate;
        this.cvv=cvv;
    }
    @Override 
    public boolean processPayment() {
        if(validatePaymentDetails()) {
            status = PaymentStatus.COMPLETED;
            paymentTime = System.currentTimeMillis();
            return true;
        }
        else {
            status = PaymentStatus.FAILED;
            paymentTime = System.currentTimeMillis();
            return false;
        }
    }
    @Override 
    public boolean validatePaymentDetails() {
        if(cardNumber.length()<20&cardNumber.length()>12&cardHolderName!=null&cvv.length()>2&cvv.length()<5) {
            //integer olup olmadığı kontrol edilecek
            if(expiryDate.substring(2,3).equals("/")) {
                return true;
            }
            else {
                return false;
            }
        }
        else {
            return false;
        }
    }
    public String getCardNumber() {
        return cardNumber;
    }
    
    public void setCardNumber(String cardNumber) {
        this.cardNumber = cardNumber;
    }
    
    public String getCardHolderName() {
        return cardHolderName;
    }
    
    public void setCardHolderName(String cardHolderName) {
        this.cardHolderName = cardHolderName;
    }
    
    public String getExpiryDate() {
        return expiryDate;
    }
    
    public void setExpiryDate(String expiryDate) {
        this.expiryDate = expiryDate;
    }
    
    public String getCvv() {
        return cvv;
    }
    
    public void setCvv(String cvv) {
        this.cvv = cvv;
    }
}
class Passenger {
    private final String id;
    private String firstName;
    private String lastName;
    private long birthDate;
    private String passportNumber;
    private String nationality;
    private String contactEmail;
    private String contactPhone;
    public Passenger(String firstName, String lastName, long birthDate, String passportNumber, String nationality, String contactEmail, String contactPhone) {
        id="P"+System.currentTimeMillis()+(int)(Math.random()*1000);
        this.firstName=firstName;
        this.lastName = lastName;
        this.birthDate=birthDate;
        this.passportNumber=passportNumber;
        this.nationality=nationality;
        this.contactEmail=contactEmail;
        this.contactPhone=contactPhone;
    }
    public boolean validateDetails() {
        if(passportNumber.length()>=5&firstName!=null&lastName!=null&contactPhone!=null) {
            if(contactEmail.indexOf("@")>0) {
                return true;
            }
            else {
                return false;
            }
        }
        else {
            return false;
        }
    }
    public int getAge() {
        long lage = (System.currentTimeMillis()-birthDate)/31536000000l;
        return (int)lage;
    }
    public String getId() {
        return id;
    }
    
    public String getFirstName() {
        return firstName;
    }
    
    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }
    
    public String getLastName() {
        return lastName;
    }
    
    public void setLastName(String lastName) {
        this.lastName = lastName;
    }
    
    public long getBirthDate() {
        return birthDate;
    }
    
    public void setBirthDate(long birthDate) {
        this.birthDate = birthDate;
    }
    
    public String getPassportNumber() {
        return passportNumber;
    }
    
    public void setPassportNumber(String passportNumber) {
        this.passportNumber = passportNumber;
    }
    
    public String getNationality() {
        return nationality;
    }
    
    public void setNationality(String nationality) {
        this.nationality = nationality;
    }
    
    public String getContactEmail() {
        return contactEmail;
    }
    
    public void setContactEmail(String contactEmail) {
        this.contactEmail = contactEmail;
    }
    
    public String getContactPhone() {
        return contactPhone;
    }
    
    public void setContactPhone(String contactPhone) {
        this.contactPhone = contactPhone;
    }
}
class Seat {
    private final String seatNumber;
    private final ClassType classType;
    private boolean available;
    public Seat(String seatNumber, ClassType classType) {
        this.seatNumber=seatNumber;
        this.classType=classType;
        available = true;
    }
    public boolean isAvailable() {
        return available;
    }
    public boolean reserve() {
        if(available == false) {
            return false;
        }
        else {
            available = false;
            return true;
        }
    }
    public boolean release() {
        if(available == true) {
            return false;
        }
        else {
            available= true;
            return true;
        }
    }
    public ClassType getClassType() {
        return classType;
    }
    public String getSeatNumber() {
        return seatNumber;
    }
    public boolean getAvailable() {
        return available;
    }
    public void setAvailable(boolean available) {
        this.available=available;
    }
}
class ChangeRequest {
    private final String bookingId;
    private long newDepartureTime;
    private long newArrivalTime;
    private String[] newSeatNumbers;
    public ChangeRequest(String bookingId, long newDepartureTime, long newArrivalTime, String[] newSeatNumbers) {
        this.bookingId=bookingId;
        this.newDepartureTime=newDepartureTime;
        this.newArrivalTime=newArrivalTime;
        this.newSeatNumbers=newSeatNumbers;
    }
    public String getBookingId() {
        return bookingId;
    }
    public long getNewDepartureTime() {
        return newDepartureTime;
    }
    public long getNewArrivalTime() {
        return newArrivalTime;
    }
    public String[] getNewSeatNumbers() {
        return newSeatNumbers;
    }
    public void setNewDepartureTime(long newDepartureTime) {
        this.newDepartureTime = newDepartureTime;
    }
    
    public void setNewArrivalTime(long newArrivalTime) {
        this.newArrivalTime = newArrivalTime;
    }
    
    public void setNewSeatNumbers(String[] newSeatNumbers) {
        this.newSeatNumbers = newSeatNumbers;
    }
}